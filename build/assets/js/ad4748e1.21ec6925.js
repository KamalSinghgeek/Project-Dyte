"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[66689],{81582:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guides/how-to-work-with-plugin-stores","title":"How to work with Plugin Stores","description":"Discover how to effectively work with plugin stores using the Dyte Plugin SDK. Customize and distribute your plugins seamlessly.","source":"@site/docs/plugin-sdk/guides/how-to-work-with-plugin-stores.mdx","sourceDirName":"guides","slug":"/guides/how-to-work-with-plugin-stores","permalink":"/plugin-sdk/guides/how-to-work-with-plugin-stores","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/plugin-sdk/guides/how-to-work-with-plugin-stores.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":1,"frontMatter":{"title":"How to work with Plugin Stores","sidebar_position":1,"description":"Discover how to effectively work with plugin stores using the Dyte Plugin SDK. Customize and distribute your plugins seamlessly."},"sidebar":"tutorialSidebar","previous":{"title":"Operations on Store","permalink":"/plugin-sdk/usage/stores-api/manage-stores"},"next":{"title":"Exchange data between plugin and meeting","permalink":"/plugin-sdk/guides/exchange-data-between-plugin-and-meeting"}}');var n=s(74848),i=s(28453);const r={title:"How to work with Plugin Stores",sidebar_position:1,description:"Discover how to effectively work with plugin stores using the Dyte Plugin SDK. Customize and distribute your plugins seamlessly."},a=void 0,l={},c=[{value:"Creating stores",id:"creating-stores",level:3},{value:"Subscribing to stores changes",id:"subscribing-to-stores-changes",level:3},{value:"Updating the store",id:"updating-the-store",level:3}];function d(e){const t={admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Head:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["The plugin SDK offers a realtime key-value database. This can be accessed under\r\nthe ",(0,n.jsx)(t.code,{children:"plugin.stores"})," modules"]}),"\n",(0,n.jsx)(t.p,{children:"There are a bunch of things you can do with plugin stores. Like\r\ncreating/deleting stores and basic CRUD operation on every store."}),"\n",(0,n.jsx)(t.h3,{id:"creating-stores",children:"Creating stores"}),"\n",(0,n.jsx)(t.p,{children:"Stores can be global or local. Local stores are available only to the user that\r\ncreated them while global stores are available to everyone."}),"\n",(0,n.jsx)(t.admonition,{title:"important",type:"danger",children:(0,n.jsx)(t.p,{children:"Store creation is a local event. It is recommended that it occurs for all\r\nclients."})}),"\n",(0,n.jsx)(t.p,{children:"Here's how you can create a store:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"    // create a global store\r\n    const videoStore = plugin.stores.create('youtube');\r\n\r\n    // create a local store\r\n    const my-playlist = plugin.stores.create('private-playlist', { local: true });\n"})}),"\n",(0,n.jsx)(t.h3,{id:"subscribing-to-stores-changes",children:"Subscribing to stores changes"}),"\n",(0,n.jsx)(t.p,{children:"Once a store is created the next step would be to subscribe to changes. It is\r\nrecommended that you do this just after the store is created."}),"\n",(0,n.jsx)(t.p,{children:"You can subscribe to a particular key in the store like so. Please note that you\r\ndo not need to define a key before subscribing to it."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"    const videoStore = plugin.stores.create('youtube');\r\n    videoStore.subscribe('video', (data) => {\r\n        ...\r\n    });\n"})}),"\n",(0,n.jsx)(t.h3,{id:"updating-the-store",children:"Updating the store"}),"\n",(0,n.jsx)(t.p,{children:"Updating a key in the store is an asynchronous task. When a user updates the\r\nstore, it will be updated for all users."}),"\n",(0,n.jsx)(t.p,{children:"All users subscribed to the store will receive a notification for it."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"const button = document.getElementById('play-video');\r\nbutton.addEventListener('click', async () => {\r\n  await videoStore.set('video', {\r\n    url: 'https://www.youtube.com/watch?v=UGl4XZ_zr5w',\r\n  });\r\n  const vid = videoStore.get('video');\r\n});\n"})}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("title",{children:"Plugin SDK How to work with Plugin Stores"}),(0,n.jsx)("meta",{name:"description",content:"Discover how to effectively work with plugin stores using the Dyte Plugin SDK. Customize and distribute your plugins seamlessly."})]})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var o=s(96540);const n={},i=o.createContext(n);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);