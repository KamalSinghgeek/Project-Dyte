"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[24450],{11045:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>g,frontMatter:()=>i,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"stage-management/host-controls","title":"Stage Host Controls","description":"Stage management APIs for Host in Dyte meetings.","source":"@site/docs/android-core/stage-management/2-host-controls.mdx","sourceDirName":"stage-management","slug":"/stage-management/host-controls","permalink":"/android-core/stage-management/host-controls","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/android-core/stage-management/2-host-controls.mdx","tags":[{"inline":true,"label":"android-core","permalink":"/android-core/tags/android-core"},{"inline":true,"label":"stage","permalink":"/android-core/tags/stage"}],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":2,"frontMatter":{"title":"Stage Host Controls","description":"Stage management APIs for Host in Dyte meetings.","sidebar_position":2,"tags":["android-core","stage"]},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/android-core/stage-management/introduction"},"next":{"title":"Stage Access for Viewers","permalink":"/android-core/stage-management/viewer-participants"}}');var a=s(74848),r=s(28453);const i={title:"Stage Host Controls",description:"Stage management APIs for Host in Dyte meetings.",sidebar_position:2,tags:["android-core","stage"]},c=void 0,o={},d=[{value:"List of Stage Access Requests",id:"list-of-stage-access-requests",level:3},{value:"Grant Access",id:"grant-access",level:3},{value:"Deny Access",id:"deny-access",level:3},{value:"Kick Users",id:"kick-users",level:3},{value:"Listening to Stage Access Requests",id:"listening-to-stage-access-requests",level:3}];function l(e){const t={code:"code",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In a stage management-enabled meeting, a user with the ",(0,a.jsx)(t.code,{children:"selfPermissions.host.canAcceptStageRequests"})," permission as ",(0,a.jsx)(t.code,{children:"true"})," is\r\nconsidered a host. The ",(0,a.jsx)(t.code,{children:"meeting.stage"})," object in Dyte's Android Core SDK provides stage management APIs that allow hosts to\r\nmanage stage access requests, invite participants to the stage, and remove participants from the stage."]}),"\n",(0,a.jsx)(t.h3,{id:"list-of-stage-access-requests",children:"List of Stage Access Requests"}),"\n",(0,a.jsxs)(t.p,{children:["You can retrieve the list of pending stage access requests by accessing the ",(0,a.jsx)(t.code,{children:"meeting.stage.accessRequests"})," property. This property\r\nprovides a list of ",(0,a.jsx)(t.code,{children:"DyteJoinedMeetingParticipant"})," objects who have requested stage access."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Note"}),": If the local user is not a host, this property returns an empty list."]}),"\n",(0,a.jsx)(t.h3,{id:"grant-access",children:"Grant Access"}),"\n",(0,a.jsxs)(t.p,{children:["To accept stage access requests or allow a participant directly to the stage, you can use the ",(0,a.jsx)(t.code,{children:"grantAccess()"})," method.\r\nAlternatively, the ",(0,a.jsx)(t.code,{children:"grantAccessAll()"})," method can be used to grant stage access to all participants with pending stage access requests."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Grants stage access to a participant\r\n// id: peer id of the stage access requesting participant\r\nmeeting.stage.grantAccess(id)\r\n\r\n// Grants stage access to all participants with pending stage access requests\r\nmeeting.stage.grantAccessAll()\n"})}),"\n",(0,a.jsx)(t.h3,{id:"deny-access",children:"Deny Access"}),"\n",(0,a.jsxs)(t.p,{children:["To reject stage access requests, you can use the ",(0,a.jsx)(t.code,{children:"denyAccess()"})," method. Similarly, the ",(0,a.jsx)(t.code,{children:"denyAccessAll()"})," method can be used to\r\ndeny all pending stage access requests."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Denies stage access request of a participant\r\n// id: peer id of the stage access requesting participant\r\nmeeting.stage.denyAccess(id)\r\n\r\n// Denies all pending stage access requests\r\nmeeting.stage.denyAccessAll()\n"})}),"\n",(0,a.jsx)(t.h3,{id:"kick-users",children:"Kick Users"}),"\n",(0,a.jsxs)(t.p,{children:["You can remove a participant from the stage by using the ",(0,a.jsx)(t.code,{children:"kick()"})," method."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"// Kicks a participant from stage\r\n// id: peer id of the ON_STAGE participant to kick\r\nmeeting.stage.kick(id)\n"})}),"\n",(0,a.jsx)(t.h3,{id:"listening-to-stage-access-requests",children:"Listening to Stage Access Requests"}),"\n",(0,a.jsxs)(t.p,{children:["You can listen to incoming stage access requests or changes in the access requests list if you are a host. The SDK provides the\r\nfollowing callbacks to ",(0,a.jsx)(t.code,{children:"DyteStageEventsListener"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:"meeting.addStageEventsListener(object : DyteStageEventsListener {\r\n    override fun onPresentRequestAdded(participant: DyteStageParticipant) {\r\n        // Called when a user is requesting to join the stage\r\n    }\r\n\r\n    override fun onPresentRequestClosed(participant: DyteStageParticipant) {\r\n        // Called when a user who was trying to join the stage leaves the call\r\n    }\r\n\r\n    override fun onPresentRequestRejected(participant: DyteStageParticipant) {\r\n        // Called when a join stage request is denied by the host\r\n    }\r\n\r\n    override fun onPresentRequestWithdrawn(participant: DyteStageParticipant) {\r\n        // Called when a user who was trying to join the stage withdraws their request to join\r\n    }\r\n\r\n    override fun onStageRequestsUpdated(accessRequests: List<DyteJoinedMeetingParticipant>) {\r\n        // Called when the access requests list is updated\r\n    }\r\n})\n"})}),"\n",(0,a.jsx)(t.p,{children:"These APIs enable you to manage stage access requests and participants effectively in Dyte meetings. Next, we'll explore the\r\nStage APIs available to Viewer participants."})]})}function g(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>c});var n=s(96540);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);