"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[46035],{74822:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"participants/type-of-participants","title":"Participant Types","description":"Learn how to handle various types of participants in your iOS app using Dyte\'s participant view controllers with our detailed documentation.","source":"@site/docs/ios/participants/type-of-participants.mdx","sourceDirName":"participants","slug":"/participants/type-of-participants","permalink":"/ios/participants/type-of-participants","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/ios/participants/type-of-participants.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":3,"frontMatter":{"image":"/static/ui-kit/1.x.x/components/participant-types.svg","sidebar_position":3,"description":"Learn how to handle various types of participants in your iOS app using Dyte\'s participant view controllers with our detailed documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Pre-built Participants Screen","permalink":"/ios/participants/pre-built-participants-screen"},"next":{"title":"Host Controls","permalink":"/ios/participants/host-controls"}}');var r=n(74848),l=n(28453);const a={image:"/static/ui-kit/1.x.x/components/participant-types.svg",sidebar_position:3,description:"Learn how to handle various types of participants in your iOS app using Dyte's participant view controllers with our detailed documentation."},s="Participant Types",o={},c=[{value:"Participant Cell Configuration",id:"participant-cell-configuration",level:2}];function p(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"participant-types",children:"Participant Types"})}),"\n",(0,r.jsx)(t.p,{children:"This documentation explains how to handle different types of participants in your iOS app using Dyte's participant view controllers."}),"\n",(0,r.jsx)(t.h2,{id:"participant-cell-configuration",children:"Participant Cell Configuration"}),"\n",(0,r.jsxs)(t.p,{children:["We need a ",(0,r.jsx)(t.code,{children:"tableView"})," to show different types of participants on this screen.\r\nThe following code snippet demonstrates how to configure participant cells based on their types."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-swift",children:"public func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\r\n    let cell =  self.viewModel.dataSourceTableView.configureCell(tableView: tableView, indexPath: indexPath)\r\n    if let cell = cell as? ParticipantInCallTableViewCell {\r\n        cell.buttonMoreClick = { [weak self] button in\r\n            guard let self = self else {return}\r\n            //createMoreMenu is covered in host control docs\r\n            self.createMoreMenu(participantListner: cell.model.participantUpdateEventListner, indexPath: indexPath)\r\n        }\r\n    } else if let cell = cell as? ParticipantWaitingTableViewCell {\r\n        cell.buttonCrossClick = { [weak self] button in\r\n            guard let self = self else {return}\r\n            self.viewModel.waitlistEventListner.rejectWaitingRequest(participant: cell.model.participant)\r\n        }\r\n        cell.buttonTickClick = { [weak self] button in\r\n            guard let self = self else {return}\r\n            self.viewModel.waitlistEventListner.acceptWaitingRequest(participant: cell.model.participant)\r\n        }\r\n    } else if let cell = cell as? OnStageWaitingRequestTableViewCell {\r\n        cell.buttonCrossClick = { [weak self] button in\r\n            guard let self = self else {return}\r\n            self.viewModel.mobileClient.stage.denyAccess(id: cell.model.participant.id)\r\n            self.reloadScreen()\r\n        }\r\n        cell.buttonTickClick = { [weak self] button in\r\n            guard let self = self else {return}\r\n            self.viewModel.mobileClient.stage.grantAccess(id: cell.model.participant.id)\r\n            self.reloadScreen()\r\n        }\r\n    } else if let cell = cell as? AcceptButtonTableViewCell {\r\n        cell.buttonClick = { [weak self] button in\r\n            guard let self = self else {return}\r\n            self.viewModel.acceptAll()\r\n            self.reloadScreen()\r\n        }\r\n    } else if let cell = cell as? RejectButtonTableViewCell {\r\n        cell.buttonClick = { [weak self] button in\r\n            guard let self = self else {return}\r\n            self.viewModel.rejectAll()\r\n            self.reloadScreen()\r\n        }\r\n    }\r\n    return cell\r\n}\n"})})]})}function d(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var i=n(96540);const r={},l=i.createContext(r);function a(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);