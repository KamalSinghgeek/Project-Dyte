"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[66770],{58430:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"socketio-client/emitting","title":"Events","description":"There are several ways to send events between the server and the client.","source":"@site/docs/community-packages/socketio-client/emitting.mdx","sourceDirName":"socketio-client","slug":"/socketio-client/emitting","permalink":"/community-packages/socketio-client/emitting","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/community-packages/socketio-client/emitting.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Initialization","permalink":"/community-packages/socketio-client/initialization"}}');var r=t(74848),o=t(28453);const i={sidebar_position:3},c="Events",l={},a=[{value:"Basic emit",id:"basic-emit",level:2},{value:"Listen for events",id:"listen-for-events",level:2},{value:"Acknowledgements",id:"acknowledgements",level:2},{value:"From client to server",id:"from-client-to-server",level:3},{value:"From server to client",id:"from-server-to-client",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Head:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,r.jsx)(n.p,{children:"There are several ways to send events between the server and the client."}),"\n",(0,r.jsx)(n.h2,{id:"basic-emit",children:"Basic emit"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Client"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'socket.emit("hello", "world");\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Server"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"io.on('connection', (socket) => {\r\n  socket.on('hello', (arg) => {\r\n    console.log(arg); // world\r\n  });\r\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"listen-for-events",children:"Listen for events"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Server"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"io.on('connection', (socket) => {\r\n  socket.emit('hello', 'world');\r\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Client"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'socket.onEvent("hello") { args ->\r\n    println(args[0]); // world\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"acknowledgements",children:"Acknowledgements"}),"\n",(0,r.jsx)(n.p,{children:"Events are great, but in some cases you may want a more classic request-response API. In Socket.IO, this feature is named acknowledgements."}),"\n",(0,r.jsxs)(n.p,{children:["You can add a callback as the last argument of the ",(0,r.jsx)(n.code,{children:"emit()"}),", and this callback will be called once the other side acknowledges the event:"]}),"\n",(0,r.jsx)(n.h3,{id:"from-client-to-server",children:"From client to server"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Client"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'\r\nsocket.emit("update item", 1, fun(data: ArrayList<JsonElement>) {\r\n    val response = data[0] as JSONObject;\r\n    println(response.getString("status")); // "ok"\r\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Server"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"io.on('connection', (socket) => {\r\n  socket.on('update item', (arg1, arg2, callback) => {\r\n    console.log(arg1); // 1\r\n    console.log(arg2); // { name: \"updated\" }\r\n    callback({\r\n      status: 'ok',\r\n    });\r\n  });\r\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"from-server-to-client",children:"From server to client"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Server"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"io.on('connection', (socket) => {\r\n  socket.emit('hello', 'please acknowledge', (response) => {\r\n    console.log(response); // prints \"hi!\"\r\n  });\r\n});\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Client"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'socket.on("hello") { args, ack ->\r\n    println(args[0]); // "please acknowledge"\r\n    ack?.invoke("hi!");\r\n}\n'})}),"\n",(0,r.jsx)(t,{children:(0,r.jsx)("title",{children:"Community Packages Events"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const r={},o=s.createContext(r);function i(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);