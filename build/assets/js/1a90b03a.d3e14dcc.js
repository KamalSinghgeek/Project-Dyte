"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[96028],{10671:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"build-in-call-ui/build-your-own/states based UI Split","title":"States Based UI Split","description":"Source Code//github.com/dyte-io/react-native-samples/tree/main/samples/createyourown_ui","source":"@site/docs/rn-ui-kit/build-in-call-ui/build-your-own/states based UI Split.mdx","sourceDirName":"build-in-call-ui/build-your-own","slug":"/build-in-call-ui/build-your-own/states based UI Split","permalink":"/react-native/build-in-call-ui/build-your-own/states based UI Split","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/rn-ui-kit/build-in-call-ui/build-your-own/states based UI Split.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":2,"frontMatter":{"title":"States Based UI Split","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Handling States and Configs","permalink":"/react-native/build-in-call-ui/build-your-own/handling-states-and-configs"},"next":{"title":"Customize Header","permalink":"/react-native/build-in-call-ui/build-your-own/customize-header"}}');var s=n(74848),r=n(28453);const a={title:"States Based UI Split",sidebar_position:2},o=void 0,c={},l=[];function u(e){const t={a:"a",code:"code",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Source Code: ",(0,s.jsx)(t.a,{href:"https://github.com/dyte-io/react-native-samples/tree/main/samples/create_your_own_ui",children:"https://github.com/dyte-io/react-native-samples/tree/main/samples/create_your_own_ui"})]}),"\n",(0,s.jsx)(t.p,{children:"Now that the basic states and configs handling is taken care of, we can focus on customisation."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"states.meeting"})," represents the meeting state such as setup/ended/waiting/joined that can be utilised to show different screens."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import React from 'react';\r\nimport { View } from 'react-native';\r\n\r\nfunction CustomDyteMeetingUI({\r\n  meeting,\r\n  config,\r\n  states,\r\n  setStates,\r\n}: {\r\n  meeting: DyteClient;\r\n  config: UIConfig;\r\n  states: CustomStates;\r\n  setStates: SetStates;\r\n}) {\r\n  if (!meeting) {\r\n    return <View> A loading screen comes here </View>;\r\n  }\r\n\r\n  if (states.meeting === 'setup') {\r\n    return <View>Pre-call UI comes here </View>;\r\n  }\r\n\r\n  if (states.meeting === 'ended') {\r\n    return <View>Post-call UI comes here </View>;\r\n  }\r\n\r\n  if (states.meeting === 'waiting') {\r\n    return <View>Waiting room UI comes here </View>;\r\n  }\r\n\r\n  if (states.meeting === 'joined') {\r\n    return <View>In-call UI comes here </View>;\r\n  }\r\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Since we have already discussed how you can ",(0,s.jsx)(t.a,{href:"/react-native/build-pre-call-ui/default-setup-screen",children:"build a custom pre-call UI from scratch"}),", we will now focus exclusively on the in-meeting UI."]}),"\n",(0,s.jsx)(t.p,{children:"In the next steps, we will learn how we can create custom header, footer and the stage UI using Dyte components."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var i=n(96540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);