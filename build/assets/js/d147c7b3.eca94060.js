"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[37718],{85166:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>a});const c=JSON.parse('{"id":"upgrade","title":"2.x Upgrade Guide","description":"Breaking changes","source":"@site/docs/react-web-core/upgrade.mdx","sourceDirName":".","slug":"/upgrade","permalink":"/react-web-core/upgrade","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/react-web-core/upgrade.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":1,"frontMatter":{"title":"2.x Upgrade Guide","sidebar_position":1},"sidebar":"tutorialSidebar","next":{"title":"Quickstart","permalink":"/react-web-core/"}}');var i=t(74848),o=t(28453);const s={title:"2.x Upgrade Guide",sidebar_position:1},r=void 0,d={},a=[{value:"Breaking changes",id:"breaking-changes",level:3}];function l(e){const n={a:"a",br:"br",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"breaking-changes",children:"Breaking changes"}),"\n",(0,i.jsx)(n.p,{children:"With this major release we tried to reduce the number of breaking changes to the minimal amount."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"1. Removal of V1 REST API terminology in favor of V2 REST API terminology"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["meeting.self.",(0,i.jsx)(n.code,{children:"clientSpecificId"})," - > meeting.self.",(0,i.jsx)(n.code,{children:"customParticipantId"})]}),"\n",(0,i.jsxs)(n.li,{children:["meeting.meta.",(0,i.jsx)(n.code,{children:"roomName"})," \u2192 meeting.meta.",(0,i.jsx)(n.code,{children:"meetingId"})]}),"\n",(0,i.jsxs)(n.li,{children:["meeting.self.",(0,i.jsx)(n.code,{children:"suggestedTheme"})," \u2192 meeting.self.",(0,i.jsx)(n.code,{children:"config"})]}),"\n",(0,i.jsxs)(n.li,{children:["Dropped meeting.meta.",(0,i.jsx)(n.code,{children:"joined"})," (Duplicate of meeting.self.",(0,i.jsx)(n.code,{children:"joined"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"2. Event changes \ufe0f\u200d\ud83d\udd25 \ufe0f\u200d\ud83d\udd25 \ufe0f\u200d\ud83d\udd25"})}),"\n",(0,i.jsxs)(n.p,{children:["Network disconnects now trigger roomLeft event on meeting.self with a state indicating the cause of leaving the room. If you have redirection logic on ",(0,i.jsx)(n.code,{children:"roomLeft"}),", please update it accordingly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"meeting.self.on('roomLeft', ({ state }) => {\r\n\tif(state === 'ended' || state == \"left\" || state == \"kicked\"){\r\n\t\t// maybe redirect to another page\r\n\t}\r\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Possible state values are \u2018kicked\u2019 | 'ended' | 'left'  | 'rejected' | 'connected-meeting' | 'disconnected' | 'failed';"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"3. Handling Reconnection / Disconnection"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"connected"})," ",(0,i.jsx)(n.code,{children:"disconnected"})," ",(0,i.jsx)(n.code,{children:"connectionError"})," ",(0,i.jsx)(n.code,{children:"iceConnected"})," ",(0,i.jsx)(n.code,{children:"iceDisconnected"})," ",(0,i.jsx)(n.code,{children:"iceFailed"})," ",(0,i.jsx)(n.code,{children:"iceReconnecting"})," ",(0,i.jsx)(n.code,{children:"socketConnected"})," ",(0,i.jsx)(n.code,{children:"socketDisconnected"})," ",(0,i.jsx)(n.code,{children:"socketReconnecting"})," ",(0,i.jsx)(n.code,{children:"socketReconnectAttempt"})," ",(0,i.jsx)(n.code,{children:"socketReconnectFailure"})," ",(0,i.jsx)(n.code,{children:"socketReconnected"})," ",(0,i.jsx)(n.code,{children:"socketFailure"})]}),"\n",(0,i.jsxs)(n.p,{children:["events on meeting.meta are ",(0,i.jsx)(n.strong,{children:"removed and replaced"})," with new simplified connection events and properties"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Updates to Media connection (WebRTC connection used for the transfer of actual media) will be sent on ",(0,i.jsx)(n.code,{children:"mediaConnectionUpdate"})," event with the payload",(0,i.jsx)(n.br,{}),"\n","You can also get the value of this payload by checking the ",(0,i.jsx)(n.code,{children:"meeting.meta.mediaState"})," property"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Updates to Websocket connection (used for chat, polls and other basic signaling) will be sent on ",(0,i.jsx)(n.code,{children:"socketConnectionUpdate"})," event.",(0,i.jsx)(n.br,{}),"\n","You can also get the value of this payload by checking the ",(0,i.jsx)(n.code,{children:"meeting.meta.socketState"})," property"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Read more on the ",(0,i.jsx)(n.a,{href:"/web-core/room-metadata",children:"meeting metadata page"})]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var c=t(96540);const i={},o=c.createContext(i);function s(e){const n=c.useContext(o);return c.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),c.createElement(o.Provider,{value:n},e.children)}}}]);