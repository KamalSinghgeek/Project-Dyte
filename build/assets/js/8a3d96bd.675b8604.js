"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[95976],{60787:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"participants/remote-participants","title":"Participant Types","description":"Events, methods and data pertaining to meeting participants.","source":"@site/docs/ios-core/participants/remote-participants.mdx","sourceDirName":"participants","slug":"/participants/","permalink":"/ios-core/participants/","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/ios-core/participants/remote-participants.mdx","tags":[{"inline":true,"label":"ios-core","permalink":"/ios-core/tags/ios-core"},{"inline":true,"label":"participants","permalink":"/ios-core/tags/participants"}],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":1,"frontMatter":{"title":"Participant Types","description":"Events, methods and data pertaining to meeting participants.","sidebar_position":1,"slug":"/participants/","tags":["ios-core","participants"]},"sidebar":"tutorialSidebar","previous":{"title":"Sharing screen on iOS","permalink":"/ios-core/local-user/screen-share-guide"},"next":{"title":"Participant Object","permalink":"/ios-core/participants/participant-object"}}');var a=i(74848),s=i(28453);const r={title:"Participant Types",description:"Events, methods and data pertaining to meeting participants.",sidebar_position:1,slug:"/participants/",tags:["ios-core","participants"]},c="Participant Types",o={},p=[];function l(e){const t={code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Head:i}=t;return i||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"participant-types",children:"Participant Types"})}),"\n",(0,a.jsxs)(t.p,{children:["The data regarding all meeting participants is stored under ",(0,a.jsx)(t.code,{children:"meeting.participants"}),". These ",(0,a.jsx)(t.strong,{children:"does not"})," include the local user. Use the methods and events to consume the participants data. For example, to get all the participants who joined the meeting:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-swift",children:"// get all joined participants\r\nvar joined: [DyteJoinedMeetingParticipant] = meeting.participants.joined\r\n\r\n// get all participants\r\nvar all: [DyteParticipant] = meeting.participants.all\n"})}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"meeting.participants"})," object has the following ",(0,a.jsx)(t.strong,{children:"lists"})," of participants"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"all"}),": A list that contains all the participants who have joined the meeting except the local user"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"joined"}),": A list that contains all the participants who are currently in the meeting\r\nexcept the local user"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"waitlisted"}),": A list that contains all the participants waiting to join the\r\nmeeting."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"active"}),": A list that contains all the participants except the local user whose media is subscribed to i.e\r\nparticipants are supposed to be on the screen at the moment except the local user"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"pinned"}),": A list that contains all the pinned participants of the meeting."]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"screenShares"}),": A list that contains all the participants who are sharing their screen."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Therefore if you were to make a video / audio grid of participants, you'd use the ",(0,a.jsx)(t.code,{children:"active"})," map, but to display the list of all participants in the meeting you'd use the ",(0,a.jsx)(t.code,{children:"joined"})," map."]}),"\n",(0,a.jsxs)(t.p,{children:["Each participant in each of the ",(0,a.jsx)(t.code,{children:"joined"}),", ",(0,a.jsx)(t.code,{children:"active"}),", ",(0,a.jsx)(t.code,{children:"pinned"})," and ",(0,a.jsx)(t.code,{children:"screenShares"})," list are of type ",(0,a.jsx)(t.code,{children:"DyteJoinedMeetingParticipant"}),", ",(0,a.jsx)(t.code,{children:"waitlisted"})," list is of type ",(0,a.jsx)(t.code,{children:"DyteWaitlistedParticipant"})," and ",(0,a.jsx)(t.code,{children:"all"})," list is of type ",(0,a.jsx)(t.code,{children:"DyteParticipant"}),"."]}),"\n",(0,a.jsx)(i,{children:(0,a.jsx)("title",{children:"iOS Core Participants"})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>c});var n=i(96540);const a={},s=n.createContext(a);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);