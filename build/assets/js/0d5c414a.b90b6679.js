"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[28439],{88146:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"local-user/events","title":"Events","description":"Explore events related to local user interactions in Flutter. Follow our documentation for effective handling of local user events in your app.","source":"@site/docs/flutter-core/local-user/events.mdx","sourceDirName":"local-user","slug":"/local-user/events","permalink":"/flutter-core/local-user/events","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/flutter-core/local-user/events.mdx","tags":[{"inline":true,"label":"flutter-core","permalink":"/flutter-core/tags/flutter-core"},{"inline":true,"label":"local-user","permalink":"/flutter-core/tags/local-user"},{"inline":true,"label":"self","permalink":"/flutter-core/tags/self"}],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":2,"frontMatter":{"title":"Events","description":"Explore events related to local user interactions in Flutter. Follow our documentation for effective handling of local user events in your app.","sidebar_position":2,"tags":["flutter-core","local-user","self"]},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/flutter-core/local-user/introduction"},"next":{"title":"Manage Media Devices","permalink":"/flutter-core/local-user/manage-media-devices"}}');var s=r(74848),i=r(28453);const o={title:"Events",description:"Explore events related to local user interactions in Flutter. Follow our documentation for effective handling of local user events in your app.",sidebar_position:2,tags:["flutter-core","local-user","self"]},a="Local User - Events",l={},d=[{value:"Video update",id:"video-update",level:3},{value:"Audio update",id:"audio-update",level:3},{value:"Proximity changed",id:"proximity-changed",level:3},{value:"Waitlist status",id:"waitlist-status",level:3},{value:"Local user removed",id:"local-user-removed",level:2},{value:"Screenshare callbacks for local user",id:"screenshare-callbacks-for-local-user",level:2},{value:"Change in audio/video source",id:"change-in-audiovideo-source",level:2},{value:"Process message within the room",id:"process-message-within-the-room",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Head:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"local-user---events",children:"Local User - Events"})}),"\n",(0,s.jsx)(n.p,{children:"You can subscribe to various local user events:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["To subscribe, pass the instance of ",(0,s.jsx)(n.code,{children:"LocalUserListener"})," class created below\r\nto ",(0,s.jsx)(n.code,{children:"addSelfEventsListener()"})," method of ",(0,s.jsx)(n.code,{children:"dyteClient"})," instance as follows:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",metastring:"{2}",children:"dyteClient.addSelfEventsListener(LocalUserListener());\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Implement ",(0,s.jsx)(n.code,{children:"DyteSelfEventsListener"})," to a class say ",(0,s.jsx)(n.code,{children:"LocalUserListener"}),", and\r\nlisten to event from ",(0,s.jsx)(n.code,{children:"DyteSelfEventsListener"})," by overriding them. This class\r\ncan be user to manage your state in the application."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class LocalUserListener implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onAudioDevicesUpdated() {\r\n    /// code to handle onAudioDevicesUpdated() event\r\n  }\r\n\r\n  ...\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"video-update",children:"Video update"}),"\n",(0,s.jsxs)(n.p,{children:["Triggered when the user starts / stops the video using ",(0,s.jsx)(n.code,{children:"enableVideo()"}),"/\r\n",(0,s.jsx)(n.code,{children:"disableVideo()"}),", or host turns-off the video."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"class LocalUserListener implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onVideoUpdate(bool videoEnabled) {\r\n    if(isVideoEnabled){\r\n      // Video is enabled, other users can see the video.\r\n    } else {\r\n      // Video is disabled, others users can't see the video.\r\n    }\r\n\r\n  //  or alternatively you can pass the bool through state as demonstrated in example app.\r\n  }\r\n\r\n  ...\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"audio-update",children:"Audio update"}),"\n",(0,s.jsxs)(n.p,{children:["Triggered when the user starts / stops the audio using ",(0,s.jsx)(n.code,{children:"enableAudio()"}),"/\r\n",(0,s.jsx)(n.code,{children:"disableAudio()"}),", or host mutes the audio."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"\r\nclass LocalUserListener implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onAudioUpdate(bool audioEnabled) {\r\n    if (audioEnabled) {\r\n        // audio is enabled, and other participants in room can hear local user\r\n      } else {\r\n        // audio is disabled, and other participants in room can not hear local user.\r\n      }\r\n\r\n    //  or alternatively you can pass the bool through state as demonstrated in example app.\r\n  }\r\n  ...\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"proximity-changed",children:"Proximity changed"}),"\n",(0,s.jsx)(n.p,{children:"Triggered by any change in proximity, such as when the device is brought near or moved away from an earpiece, which triggers the display to turn on or off."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"\r\nclass LocalUserListener implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onProximityChanged(bool isNear) {\r\n    if (isNear) {\r\n        // Display should be turned off, as user might be speaking through ear piece\r\n      } else {\r\n        // Display should be tunred on, as user might be looking at display and listening through speaker/earphones.\r\n      }\r\n  }\r\n  ...\r\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"waitlist-status",children:"Waitlist status"}),"\n",(0,s.jsxs)(n.p,{children:["When the waiting room feature is enabled for a meeting, you can use the ",(0,s.jsx)(n.code,{children:"onWaitListStatusUpdate()"})," callback function to receive updates on waiting room status changes."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"\r\nclass LocalUserNotifier implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onWaitListStatusUpdate(DyteWaitListStatus waitListStatus) {\r\n    // DyteWaitListStatus is an enum with the following values:\r\n    // if `DyteWaitListStatus.none`, user is not on the waitlist\r\n    // if `DyteWaitListStatus.waiting`, user is on the waitlist\r\n    // if `DyteWaitListStatus.accepted`, user has been accepted in the meeting.\r\n    // if `DyteWaitListStatus.rejected`, user has been rejected from the meeting.\r\n  }\r\n\r\n  ...\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"local-user-removed",children:"Local user removed"}),"\n",(0,s.jsxs)(n.p,{children:["When the local user is removed from the meeting, the ",(0,s.jsx)(n.code,{children:"onRemovedFromMeeting()"})," callback is triggered."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"\r\nclass LocalUserNotifier implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onRemovedFromMeeting() {\r\n    // Display an alert to the user indicating that they are no longer in the meeting.\r\n  }\r\n\r\n  ...\r\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"screenshare-callbacks-for-local-user",children:"Screenshare callbacks for local user"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"\r\nclass LocalUserNotifier implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n\r\n  @override\r\n  void onScreenShareStartFailed(String reason) {\r\n    // screenshare failed to start\r\n  }\r\n\r\n  @override\r\n  void onScreenShareStarted() {\r\n    // screenshare started presenting in the meeting\r\n  }\r\n\r\n  @override\r\n  void onScreenShareStopped() {\r\n    // screenshared stopped by the local user\r\n  }\r\n\r\n  ...\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"change-in-audiovideo-source",children:"Change in audio/video source"}),"\n",(0,s.jsxs)(n.p,{children:["Whenever user changes audio/video source using ",(0,s.jsx)(n.code,{children:"setAudioDevice(DyteAudioDevice)"})," and ",(0,s.jsx)(n.code,{children:"setVideoDevice(DyteVideoDevice)"})," respectively [ref: ",(0,s.jsx)(n.a,{href:"/flutter-core/local-user/manage-media-devices",children:"here"}),"], ",(0,s.jsx)(n.code,{children:"onAudioDevicesUpdated()"})," and ",(0,s.jsx)(n.code,{children:"onVideoDevicesChanged()"})," are triggered respectively."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"\r\nclass LocalUserNotifier implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onAudioDevicesUpdated() {\r\n    // triggered on successful execution of `setAudioDevice(DyteAudioDevice)`\r\n  }\r\n\r\n  @override\r\n  void onVideoDeviceChanged(DyteVideoDevice videoDevice) {\r\n    // triggered on successful execution of `setVideoDevice(DyteVideoDevice)`\r\n  }\r\n\r\n  ...\r\n\r\n}\r\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"process-message-within-the-room",children:"Process message within the room"}),"\n",(0,s.jsxs)(n.p,{children:["Manage messages within the room using ",(0,s.jsx)(n.code,{children:"onRoomMessage(String message)"})," callback."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"\r\nclass LocalUserNotifier implements DyteSelfEventsListener {\r\n\r\n  ...\r\n\r\n  @override\r\n  void onRoomMessage(String type, Map<String, dynamic> payload) {\r\n    // triggered when a message is sent within the room.\r\n  }\r\n\r\n  ...\r\n}\n"})}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsx)("title",{children:"Flutter Core Events"}),(0,s.jsx)("meta",{name:"description",content:"Explore events related to local user interactions in Flutter. Follow our documentation for effective handling of local user events in your app."})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var t=r(96540);const s={},i=t.createContext(s);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);