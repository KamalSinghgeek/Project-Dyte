"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[88559],{56612:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"pre-call/media-preview","title":"Media Preview","description":"This section focuses on pre-call functionality, providing developers with the tools needed to prepare the media environment before joining the meeting. If you are using our UI Kits, this will be handled by dyte-setup-screen or could be built with dyte-participant-tile, dyte-settings components.","source":"@site/docs/react-web-core/pre-call/1-media-preview.mdx","sourceDirName":"pre-call","slug":"/pre-call/media-preview","permalink":"/react-web-core/pre-call/media-preview","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/react-web-core/pre-call/1-media-preview.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Quickstart","permalink":"/react-web-core/"},"next":{"title":"Handling Browser Permissions","permalink":"/react-web-core/pre-call/handling-permissions"}}');var r=i(74848),t=i(28453);const d={},a="Media Preview",o={},c=[{value:"Properties",id:"properties",level:2},{value:"Methods",id:"methods",level:2},{value:"Toggling Media",id:"toggling-media",level:3},{value:"Changing Media Device",id:"changing-media-device",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"media-preview",children:"Media Preview"})}),"\n",(0,r.jsxs)(n.p,{children:["This section focuses on pre-call functionality, providing developers with the tools needed to prepare the media environment before joining the meeting. If you are using our UI Kits, this will be handled by ",(0,r.jsx)(n.code,{children:"dyte-setup-screen"})," or could be built with ",(0,r.jsx)(n.code,{children:"dyte-participant-tile"}),", ",(0,r.jsx)(n.code,{children:"dyte-settings"})," components."]}),"\n",(0,r.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"audioEnabled"}),": A ",(0,r.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the audio currently enabled."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"videoEnabled"}),": A ",(0,r.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the video currently enabled."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"audioTrack"}),": The audio track for the local user."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"videoTrack"}),": The video track for the local user."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsx)(n.h3,{id:"toggling-media",children:"Toggling Media"}),"\n",(0,r.jsx)(n.p,{children:"The same methods used by post joining meeting are also used to control media-pre meeting."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Mute/Unmute microphone"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Mute Audio\r\nawait meeting.self.disableAudio();\r\n\r\n// Unmute Audio\r\nawait meeting.self.enableAudio();\n"})}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart LR\r\n    classDef basic fill:white;\r\n\r\n    eam("enableAudio()") --\x3e success("Emits <code>audioUpdate</code> event on <code>self</code>")\r\n    eam -. possibly .-> indirect("Update <code>mediaPermissions.audio</code> with <code>mediaPermissionUpdate</code> event")\r\n    indirect --\x3e hooks("Hook re-render")\r\n    class eam basic;'}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const audioEnabled = useDyteSelector((m) => m.self.audioEnabled);\r\nconst audioTrack = useDyteSelector((m) => m.self.audioTrack);\n"})}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsxs)(n.p,{children:["or if you want a traditional JS event you can use the ",(0,r.jsx)(n.code,{children:"audioUpdate"})," event"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Alternatively\r\nuseEffect(() => {\r\n  if(!meeting) return;\r\n\r\n  const onAudioUpdate = ({ audioEnabled, audioTrack })=> {\r\n  // if enabled show a visual(izer) preview of the audio to the user\r\n  };\r\n\r\n  meeting.self.on('audioUpdate', onAudioUpdate);\r\n  return () => {\r\n    meeting.self.removeListener('audioUpdate', onAudioUpdate)\r\n  }\r\n}, [meeting])\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Enable/Disable camera"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Disable Video\r\nawait meeting.self.disableVideo();\r\n\r\n// Enable Video\r\nawait meeting.self.enableVideo();\n"})}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart LR\r\n    classDef basic fill:white;\r\n\r\n    eam("enableVideo()") --\x3e success("Emits <code>videoUpdate</code> event on <code>self</code>")\r\n    eam -. possibly .-> indirect("Update <code>mediaPermissions.audio</code> with <code>mediaPermissionUpdate</code> event")\r\n\r\n    class eam basic;'}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const videoEnabled = useDyteSelector((m) => m.self.videoEnabled);\r\nconst videoTrack = useDyteSelector((m) => m.self.videoTrack);\n"})}),"\n",(0,r.jsx)(n.h3,{id:"changing-media-device",children:"Changing Media Device"}),"\n",(0,r.jsx)(n.p,{children:"Media devices represents the hardware for the camera, microphone and speaker\r\ndevices. To get the list of media devices that are currently being used, you can\r\nuse the following methods:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"// Fetch current media devices being used\r\nconst currentDevices = meeting.self.getCurrentDevices();\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"// Get all media devices\r\nconst devices = meeting.self.getAllDevices();\r\n\r\n// Get all audio devices\r\nconst audioDevices = meeting.self.getAudioDevices();\r\n\r\n// Get all video devices\r\nconst videoDevices = meeting.self.getVideoDevices();\r\n\r\n// Get all speakers\r\nconst speakerDevices = meeting.self.getSpeakerDevices();\n"})}),"\n",(0,r.jsx)(n.p,{children:"These methods should be called when you want the user to be shown these preferences. When the user selects a device, use the below method to select the device."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Set device"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"meeting.self.setDevice(device);\r\n// eg. device = videoDevices[0];\n"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>d,x:()=>a});var s=i(96540);const r={},t=s.createContext(r);function d(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);