"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[72698],{61361:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"local-user/events","title":"Events","description":"Local user events guide.","source":"@site/docs/react-web-core/local-user/events.mdx","sourceDirName":"local-user","slug":"/local-user/events","permalink":"/react-web-core/local-user/events","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/react-web-core/local-user/events.mdx","tags":[{"inline":true,"label":"react-web-core","permalink":"/react-web-core/tags/react-web-core"},{"inline":true,"label":"local-user","permalink":"/react-web-core/tags/local-user"},{"inline":true,"label":"self","permalink":"/react-web-core/tags/self"},{"inline":true,"label":"self events","permalink":"/react-web-core/tags/self-events"}],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":2,"frontMatter":{"title":"Events","description":"Local user events guide.","sidebar_position":2,"tags":["react-web-core","local-user","self","self events"]},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/react-web-core/local-user/introduction"},"next":{"title":"Manage Media Devices","permalink":"/react-web-core/local-user/manage-media-devices"}}');var i=r(74848),t=r(28453);const o={title:"Events",description:"Local user events guide.",sidebar_position:2,tags:["react-web-core","local-user","self","self events"]},a="Local User - Events",d={},c=[{value:"Room joined / leave",id:"room-joined--leave",level:2},{value:"Video update",id:"video-update",level:2},{value:"Audio update",id:"audio-update",level:2},{value:"Screenshare update",id:"screenshare-update",level:2},{value:"Device update",id:"device-update",level:2},{value:"Network quality score",id:"network-quality-score",level:2},{value:"Permission Updates",id:"permission-updates",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components},{Head:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"local-user---events",children:"Local User - Events"})}),"\n",(0,i.jsx)(n.h2,{id:"room-joined--leave",children:"Room joined / leave"}),"\n",(0,i.jsx)(n.p,{children:"Trigger an update when the local user joins / leave a room."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const roomJoined = useDyteSelector((meeting) => meeting.self.roomJoined);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"video-update",children:"Video update"}),"\n",(0,i.jsxs)(n.p,{children:["Triggered when the user starts / stops the video using ",(0,i.jsx)(n.code,{children:"enableVideo"})," or\r\n",(0,i.jsx)(n.code,{children:"disableVideo"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const videoEnabled = useDyteSelector((meeting) => meeting.self.videoEnabled);\r\nconst videoTrack = useDyteSelector((meeting) => meeting.self.videoTrack);\r\n\r\nuseEffect(() => {\r\n  const videoElem = document.getElementById('my-video');\r\n  if (videoEnabled && videoTrack) {\r\n    const stream = new MediaStream();\r\n    stream.addTrack(videoTrack);\r\n    videoElem.srcObject = stream;\r\n    videoElem.play();\r\n  }\r\n}, [videoEnabled, videoTrack]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"audio-update",children:"Audio update"}),"\n",(0,i.jsxs)(n.p,{children:["Triggered when the user starts / stops the audio using ",(0,i.jsx)(n.code,{children:"enableAudio"})," or\r\n",(0,i.jsx)(n.code,{children:"disableAudio"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const audioEnabled = useDyteSelector((meeting) => meeting.self.audioEnabled);\r\nconst audioTrack = useDyteSelector((meeting) => meeting.self.audioTrack);\r\n\r\nuseEffect(() => {\r\n  const audioElem = document.getElementById('my-audio');\r\n  if (audioEnabled && audioTrack) {\r\n    const stream = new MediaStream();\r\n    stream.addTrack(audioTrack);\r\n    audioElem.srcObject = stream;\r\n    audioElem.play();\r\n  }\r\n}, [audioEnabled, audioTrack]);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"screenshare-update",children:"Screenshare update"}),"\n",(0,i.jsxs)(n.p,{children:["Triggered when the user starts / stops the screen share using\r\n",(0,i.jsx)(n.code,{children:"enableScreenShare()"})," or ",(0,i.jsx)(n.code,{children:"disableScreenShare()"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"const screenShareEnabled = useDyteSelector(\r\n  (meeting) => meeting.self.screenShareEnabled\r\n);\r\nconst screenShareTrack = useDyteSelector(\r\n  (meeting) => meeting.self.screenShareTrack\r\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"device-update",children:"Device update"}),"\n",(0,i.jsxs)(n.p,{children:["Subscribe to the ",(0,i.jsx)(n.code,{children:"deviceUpdate"})," event to handle the changing video, audio and\r\nspeaker devices"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"meeting.self.on('deviceUpdate', ({ device }) => {\r\n  // handle microphone device change\r\n  if (device.kind === 'audioinput') {\r\n    console.log('mic change', device);\r\n  }\r\n  // handle camera device change\r\n  if (device.kind === 'videoinput') {\r\n    console.log('camera change', device);\r\n  }\r\n  // handle speaker device change\r\n  if (device.kind === 'audiooutput') {\r\n    console.log('speaker change', device);\r\n  }\r\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"network-quality-score",children:"Network quality score"}),"\n",(0,i.jsxs)(n.p,{children:["Subscribe to the ",(0,i.jsx)(n.code,{children:"mediaScoreUpdate"})," event to monitor network"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"meeting.self.on('mediaScoreUpdate', ({ kind, isScreenshare, score }) => {\r\n  if (kind === 'video') {\r\n    console.log(\r\n      `Your ${isScreenshare ? 'screenshare' : 'video'} quality score is `,\r\n      score\r\n    );\r\n  }\r\n\r\n  if (kind === 'audio') {\r\n    console.log('Your audio quality score is ', score);\r\n  }\r\n\r\n  if (score < 5) {\r\n    console.log('Your media quality is poor');\r\n  }\r\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"permission-updates",children:"Permission Updates"}),"\n",(0,i.jsx)(n.p,{children:"Triggered when permissions are updated dynamically by a privileged user"}),"\n",(0,i.jsxs)(n.p,{children:["Subscribe to ",(0,i.jsx)(n.code,{children:"chatUpdate"}),", ",(0,i.jsx)(n.code,{children:"pollsUpdate"}),", ",(0,i.jsx)(n.code,{children:"pluginsUpdate"})," or ",(0,i.jsx)(n.code,{children:"*"})," for any kind of permission updates\r\nExample:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"meeting.self.permissions.on('chatUpdate', () => {\r\n  // Chat permissions are updated\r\n  // check meeting.self.permissions for updated permissions\r\n});\n"})}),"\n",(0,i.jsx)(r,{children:(0,i.jsx)("title",{children:"React Web Core Events"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);