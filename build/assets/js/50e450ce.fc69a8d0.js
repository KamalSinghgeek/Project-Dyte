"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[22400],{8938:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Pre-Built-Plugins_Guides/load-plugin","title":"Load Plugins","description":"Learn how to use and customize the DyteAvatarView component in Dyte\'s iOS UiKit with our detailed documentation.","source":"@site/docs/ios/Pre-Built-Plugins_Guides/load-plugin.mdx","sourceDirName":"Pre-Built-Plugins_Guides","slug":"/Pre-Built-Plugins_Guides/load-plugin","permalink":"/ios/Pre-Built-Plugins_Guides/load-plugin","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/ios/Pre-Built-Plugins_Guides/load-plugin.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"frontMatter":{"description":"Learn how to use and customize the DyteAvatarView component in Dyte\'s iOS UiKit with our detailed documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Pre-built Plugin screen","permalink":"/ios/Pre-Built-Plugins_Guides/Plugins"},"next":{"title":"Introduction","permalink":"/ios/participants/introduction"}}');var l=n(74848),o=n(28453);const s={description:"Learn how to use and customize the DyteAvatarView component in Dyte's iOS UiKit with our detailed documentation."},r="Load Plugins",u={},d=[{value:"Overview: How to display plugins inside plugins view.",id:"overview-how-to-display-plugins-inside-plugins-view",level:2},{value:"Creating plugin view",id:"creating-plugin-view",level:3},{value:"Loading pluginView with plugins",id:"loading-pluginview-with-plugins",level:4}];function a(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Head:n}=i;return n||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.header,{children:(0,l.jsx)(i.h1,{id:"load-plugins",children:"Load Plugins"})}),"\n",(0,l.jsx)(i.h2,{id:"overview-how-to-display-plugins-inside-plugins-view",children:"Overview: How to display plugins inside plugins view."}),"\n",(0,l.jsxs)(i.p,{children:["To display individual plugin inside App. We will be using component ",(0,l.jsx)(i.a,{href:"/ios/components/dyte-plugin-view",children:"DytePluginsView"})]}),"\n",(0,l.jsx)(i.h3,{id:"creating-plugin-view",children:"Creating plugin view"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-swift",children:" let viewModel = VideoPeerViewModel(mobileClient: meeting,\r\n                                    participant: meeting.localUser,\r\n                                    showSelfPreviewVideo: false,\r\n                                    showScreenShareVideoView: true)\r\n  let pluginView = DytePluginsView(videoPeerViewModel:viewModel)\r\n  self.view.addSubview(pluginView)\n"})}),"\n",(0,l.jsx)(i.p,{children:"Use above code to create instance of DytePluginsView and add this view to any view of your choice."}),"\n",(0,l.jsx)(i.h4,{id:"loading-pluginview-with-plugins",children:"Loading pluginView with plugins"}),"\n",(0,l.jsx)(i.p,{children:"You can get the list of active plugins with the help of below API"}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-swift",children:"let plugins: [DytePlugin] = self.dyteMobileClient.plugins.active\r\nlet arrButtons = [DytePluginScreenShareTabButton]()\r\n\r\nfor plugin in plugins {\r\n  let button = DytePluginScreenShareTabButton(image: plugin.picture, title: plugin.name, id: plugin.id)\r\n  arrButtons.append(button)\r\n}\n"})}),"\n",(0,l.jsxs)(i.p,{children:["To show ",(0,l.jsx)(i.code,{children:"arrButtons"})," created from above code on the ",(0,l.jsx)(i.a,{href:"/ios/components/dyte-plugin-view",children:"DytePluginsView"}),", We will be using\r\nbelow API."]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-swift",children:"self.pluginView.setButtons(buttons: arrButtons, selectedIndex: 0) { [weak self] button, pluginIsClicked in\r\n    guard let self = self else {return}\r\n  // We are having plugin button tapped by the user. \r\n  // So to load this plugin inside PluginsView we need to call this API. \r\n    self.pluginView.show(pluginView:  button.plugin.getPluginView())\r\n}\r\n\n"})}),"\n",(0,l.jsx)(n,{children:(0,l.jsx)("title",{children:"iOS DyteAvatarView"})})]})}function c(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(a,{...e})}):a(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>s,x:()=>r});var t=n(96540);const l={},o=t.createContext(l);function s(e){const i=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),t.createElement(o.Provider,{value:i},e.children)}}}]);