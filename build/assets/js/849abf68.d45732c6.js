"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[84075],{25671:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"local-user/introduction","title":"Introduction","description":"Local user setup guide.","source":"@site/docs/rn-core/local-user/introduction.mdx","sourceDirName":"local-user","slug":"/local-user/introduction","permalink":"/rn-core/local-user/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/rn-core/local-user/introduction.mdx","tags":[{"inline":true,"label":"rn-core","permalink":"/rn-core/tags/rn-core"},{"inline":true,"label":"local-user","permalink":"/rn-core/tags/local-user"},{"inline":true,"label":"self","permalink":"/rn-core/tags/self"}],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":1,"frontMatter":{"title":"Introduction","description":"Local user setup guide.","sidebar_position":1,"tags":["rn-core","local-user","self"]},"sidebar":"tutorialSidebar","previous":{"title":"Waiting Room","permalink":"/rn-core/pre-call/waiting-room"},"next":{"title":"Events","permalink":"/rn-core/local-user/events"}}');var s=r(74848),t=r(28453);const a={title:"Introduction",description:"Local user setup guide.",sidebar_position:1,tags:["rn-core","local-user","self"]},l="Introduction",o={},d=[{value:"Properties",id:"properties",level:2},{value:"Change the name of the local user",id:"change-the-name-of-the-local-user",level:2},{value:"Media",id:"media",level:2},{value:"Mute/Unmute microphone",id:"muteunmute-microphone",level:3},{value:"Enable/Disable camera",id:"enabledisable-camera",level:3},{value:"Enable / Disable Screenshare",id:"enable--disable-screenshare",level:3}];function c(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Head:r,TabItem:i,Tabs:a}=n;return r||u("Head",!0),i||u("TabItem",!0),a||u("Tabs",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsxs)(n.p,{children:["Accessible via ",(0,s.jsx)(n.code,{children:"self"})," key within the ",(0,s.jsx)(n.code,{children:"meeting"})," object, the local user object consists of all the information related to the current participant and methods to configure media and other states."]}),"\n",(0,s.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(n.p,{children:"Here is a list of properties that local user provides:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Metadata"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"userId"}),": User ID of the local user."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"customParticipantId"}),": Identifier provided by the developer while adding the\r\nparticipant."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"organizationId"}),": The ID of the organization the meeting is created from."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"name"}),": Contains Name of the local user."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"picture"}),": Display picture URL for the local user."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"permissions"}),": The permissions related to various capabilities for the local user defined by the preset"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Media"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"mediaPermissions"}),": The current audio and video permissions given by the local\r\nuser."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"audioTrack"}),": The audio track for the local user."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"videoTrack"}),": The video track for the local user."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"screenShareTracks"}),": The screen share video and audio tracks for the local\r\nuser."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"audioEnabled"}),": A boolean value indicating if the audio currently enabled."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"videoEnabled"}),": A boolean value indicating if the video currently enabled."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"screenShareEnabled"}),": A boolean value indicating if the screen share is\r\ncurrently enabled."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"States"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"isPinned"}),": A ",(0,s.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the local user is pinned or not."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"roomJoined"}),": A ",(0,s.jsx)("span",{className:"tag-orange",children:"boolean"})," value indicating if the local user is in the meeting"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"roomState"}),": Indicates the state of the user in the meeting. It\r\ncan take the following values:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"'init' | 'joined' | 'waitlisted' | 'rejected' | 'kicked' | 'left' | 'ended';\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.mermaid,{value:"stateDiagram-v2\r\n    direction LR\r\n    classDef END fill:#ef4444,color:#fff,stroke:#ef4444;\r\n\r\n    [*] --\x3e init\r\n    init --\x3e joined\r\n    init --\x3e waitlisted\r\n    waitlisted --\x3e joined\r\n    waitlisted --\x3e rejected\r\n    joined --\x3e kicked\r\n    joined --\x3e left\r\n    joined --\x3e ended\r\n\r\n    class kicked,left,ended,rejected END"}),"\n",(0,s.jsx)("br",{}),"\n",(0,s.jsx)(n.h2,{id:"change-the-name-of-the-local-user",children:"Change the name of the local user"}),"\n",(0,s.jsxs)(n.p,{children:["Change the user's name by calling ",(0,s.jsx)(n.code,{children:"setName"})," method. The changed name will\r\nreflect across all participants ONLY if the change happens before joining the\r\nmeeting."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"await meeting.self.setName('New Name');\n"})}),"\n",(0,s.jsx)(n.h2,{id:"media",children:"Media"}),"\n",(0,s.jsx)(n.h3,{id:"muteunmute-microphone",children:"Mute/Unmute microphone"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Mute Audio\r\nawait meeting.self.disableAudio();\r\n\r\n// Unmute Audio\r\nawait meeting.self.enableAudio();\r\n\r\n// Get current status\r\nmeeting.self.audioEnabled;\n"})}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart LR\r\n    classDef basic fill:white;\r\n\r\n    eam("enableAudio()") --\x3e success("Emits <code>audioUpdate</code> event on <code>self</code>")\r\n    eam -. possibly .-> indirect("Update <code>mediaPermissions.audio</code> with <code>mediaPermissionUpdate</code> event")\r\n\r\n    class eam basic;'}),"\n",(0,s.jsx)(n.h3,{id:"enabledisable-camera",children:"Enable/Disable camera"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Disable Video\r\nawait meeting.self.disableVideo();\r\n\r\n// Enable Video\r\nawait meeting.self.enableVideo();\r\n\r\n// Get current status\r\nmeeting.self.videoEnabled;\n"})}),"\n",(0,s.jsx)(n.mermaid,{value:'flowchart LR\r\n    classDef basic fill:white;\r\n\r\n    eam("enableVideo()") --\x3e success("Emits <code>videoUpdate</code> event on <code>self</code>")\r\n    eam -. possibly .-> indirect("Update <code>mediaPermissions.video</code> with <code>mediaPermissionUpdate</code> event")\r\n\r\n    class eam basic;'}),"\n",(0,s.jsx)(n.h3,{id:"enable--disable-screenshare",children:"Enable / Disable Screenshare"}),"\n",(0,s.jsxs)(a,{groupId:"mobile-pm",defaultValue:"android",values:[{label:"Android",value:"android"},{label:"iOS",value:"ios"}],children:[(0,s.jsx)(i,{value:"android",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// Enable Screenshare\r\nawait meeting.self.enableScreenShare();\r\n\r\n// Disable Screenshare\r\nawait meeting.self.disableScreenShare();\r\n\r\n// Get current status\r\nmeeting.self.screenShareEnabled;\n"})})}),(0,s.jsx)(i,{value:"ios",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["In ",(0,s.jsx)("code",{children:"Xcode"}),", Go to Targets -> Add a target -> Choose ",(0,s.jsx)("code",{children:"Broadcast Upload Extension"})," (Choose Swift as Language)"]}),"\n",(0,s.jsxs)(n.li,{children:["Go to ",(0,s.jsx)("code",{children:"Targets Signing & Capabilities"}),", and enable ",(0,s.jsx)("code",{children:"App Groups"})," for both App target and Broadcast Upload Extension target"]}),"\n",(0,s.jsxs)(n.li,{children:["In the app's target, add the following in ",(0,s.jsx)("code",{children:"Info.plist"}),":","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"  <key>RTCAppGroupIdentifier</key>\r\n  <string>YOUR_APP_GROUP</string>\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Add these changes to your iOS folder's Podfile:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ruby",children:"target 'YOUR_APP_TARGET_NAME'\r\n  ...\r\n\r\n  post_install do |installer|\r\n    ...\r\n    # Add these for Dyte iOS Screenshare\r\n    installer.pods_project.targets.each do |target|\r\n      target.build_configurations.each do |config|\r\n        config.build_settings['APPLICATION_EXTENSION_API_ONLY'] = 'No'\r\n        config.build_settings['ENABLE_USER_SCRIPT_SANDBOXING'] = 'No'\r\n      end\r\n    end\r\n    ...\r\n  end\r\n\r\n  ...\r\nend\r\n\r\n# Add this at the end of Podfile\r\npod 'YOUR_BROADCAST_EXTENSION_TARGET_NAME'\r\n    config = use_native_modules!\r\n    use_react_native!(:path => config[\"reactNativePath\"], :hermes_enabled => false)\r\n    # Support ReactNativeCore Pod in the Broadcast Upload Extension\r\n    pod 'ReactNativeCore', :path => '../node_modules/@dytesdk/react-native-core'\r\nend\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Replace the ",(0,s.jsx)("code",{children:"SampleHandler"})," in Broadcast Upload Extension with the following:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-swift",children:'  import ReactNativeCore\r\n\r\n  class SampleHandler: DyteScreenshareHandler {\r\n    override init() {\r\n      super.init(appGroupIdentifier: "YOUR_APP_GROUP", bundleIdentifier: "BUNDLE_IDENTIFIER_FOR_BROADCAST_UPLOAD_EXTENSION")\r\n    }\r\n  }\n'})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)("b",{children:"Note:"}),"\r\nReplace ",(0,s.jsx)("code",{children:"YOUR_APP_GROUP"})," with your App Group Name and ",(0,s.jsx)("code",{children:"BUNDLE_IDENTIFIER_FOR_BROADCAST_UPLOAD_EXTENSION"})," with Bundle Identifier of Screnshare Extension."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Go to Broadcast Extension target -> ",(0,s.jsx)("code",{children:"Build Settings"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("code",{children:"Build Options"})," -> Set ",(0,s.jsx)("code",{children:"User Script Sandboxing"})," to ",(0,s.jsx)("code",{children:"No"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("code",{children:"Signing"})," -> ",(0,s.jsx)("code",{children:"Enable App Sandbox"})," to ",(0,s.jsx)("code",{children:"No"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Now enable the screenshare pop up handle and then enable Dyte's screenshare API:","\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Import this component\r\nimport { NativeModules, findNodeHandle } from 'react-native';\r\nimport { ScreenCapturePickerView } from '@dyteinternals/react-native-webrtc';\r\n\r\nfunction MyComponent() {\r\n\r\n  const screenCapturePickerViewRef = useRef(null);\r\n\r\n  // Function to show ScreenCapture Picker\r\n  const showScreenRecordPicker = async () => {\r\n    const handle = findNodeHandle(screenCapturePickerViewRef.current);\r\n    NativeModules.ScreenCapturePickerViewManager.show(handle);\r\n  };\r\n\r\n  // To enable screenshare\r\n  await showScreenRecordPicker();\r\n  await meeting.self.enableScreenShare();\r\n\r\n  // To disable screenshare\r\n  await meeting.self.disableScreenShare();\r\n\r\n  return (\r\n    ...\r\n    // Add this in components\r\n    <ScreenCapturePickerView ref={screenCapturePickerViewRef} />\r\n    ...\r\n  );\r\n\r\n}\n"})}),"\n"]}),"\n"]})})]}),"\n",(0,s.jsx)(r,{children:(0,s.jsx)("title",{children:"React Native Core Introduction"})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}function u(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var i=r(96540);const s={},t=i.createContext(s);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);