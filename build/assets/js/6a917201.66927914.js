"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[41416],{65427:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"render-participant-videos/using-dytegrid","title":"Using DyteGridView","description":"The DyteGridView is a custom Android View provided by Dyte\'s Android UI Kit, designed to simplify","source":"@site/docs/android/render-participant-videos/using-dytegrid.mdx","sourceDirName":"render-participant-videos","slug":"/render-participant-videos/using-dytegrid","permalink":"/android/render-participant-videos/using-dytegrid","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/android/render-participant-videos/using-dytegrid.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":1,"frontMatter":{"title":"Using DyteGridView","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Audio/video - Device Selection","permalink":"/android/build-pre-call-ui/build-your-own/add-audio-video-device"},"next":{"title":"Building Your Own UI","permalink":"/android/render-participant-videos/custom-ui"}}');var r=t(74848),d=t(28453);const o={title:"Using DyteGridView",sidebar_position:1},s=void 0,a={},c=[{value:"Building Your Own UI",id:"building-your-own-ui",level:2}];function l(e){const i={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(i.p,{children:["The ",(0,r.jsx)(i.a,{href:"/android/components/dyte-grid",children:"DyteGridView"})," is a custom Android View provided by Dyte's Android UI Kit, designed to simplify\r\nthe rendering of participant videos in a meeting. It abstracts the grid handling logic, making it easy to\r\ndisplay videos in a grid layout."]}),"\n",(0,r.jsxs)(i.p,{children:["To render participant videos using ",(0,r.jsx)(i.code,{children:"DyteGridView"}),", follow these steps:"]}),"\n",(0,r.jsxs)(i.ol,{children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Add DyteGridView to your layout"}),":"]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-xml",children:'<dyte.io.uikit.view.dytegrid.DyteGridViewV2\r\n        android:id="@+id/dyte_grid_view"\r\n        android:layout_width="match_parent"\r\n        android:layout_height="match_parent"\r\n        />\n'})}),"\n",(0,r.jsxs)(i.ol,{start:"2",children:["\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.strong,{children:"Activate DyteGridView"}),": In your fragment or activity class, activate the ",(0,r.jsx)(i.code,{children:"DyteGridViewV2"})," by calling the\r\n",(0,r.jsx)(i.code,{children:"activate"})," method with an instance of ",(0,r.jsx)(i.code,{children:"DyteMobileClient"}),"."]}),"\n"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-kotlin",children:"import dyte.io.uikit.view.dytegrid.DyteGridViewV2\r\nimport io.dyte.core.DyteMobileClient\r\n\r\nclass MeetingFragment : Fragment() {\r\n    private lateinit var gridView: DyteGridViewV2\r\n    private val meeting: DyteMobileClient by lazy { DyteUIKitBuilder.meeting }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        gridView = view.findViewById(R.id.dyte_grid_view)\r\n        gridView.activate(meeting)\r\n    }\r\n}\n"})}),"\n",(0,r.jsx)(i.p,{children:"After activation, the DyteGridView will automatically render the videos of the participants present in the meeting."}),"\n",(0,r.jsx)("img",{src:"/static/android-ui-kit/render-participant-videos/render-videos-dytegrid.png",width:"252",height:"560",alt:"Render Participant videos using DyteGridView",className:"mb-10"}),"\n",(0,r.jsx)(i.h2,{id:"building-your-own-ui",children:"Building Your Own UI"}),"\n",(0,r.jsx)(i.p,{children:"While DyteGridView provides a convenient way to render participant videos, you may want to customize the UI further.\r\nIn the next section, we will explore how to build your own UI to render participant videos according to your application's specific requirements."})]})}function p(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>s});var n=t(96540);const r={},d=n.createContext(r);function o(e){const i=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(d.Provider,{value:i},e.children)}}}]);