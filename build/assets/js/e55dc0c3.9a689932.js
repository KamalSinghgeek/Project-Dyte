"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[96233],{97992:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"chat/components-in-chat","title":"Chat Components","description":"Learn how to use and customize the CustomChatViewController component in Dyte\'s iOS UiKit with our detailed documentation.","source":"@site/docs/ios/chat/components-in-chat.mdx","sourceDirName":"chat","slug":"/chat/components-in-chat","permalink":"/ios/chat/components-in-chat","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/ios/chat/components-in-chat.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":2,"frontMatter":{"image":"/static/ui-kit/1.x.x/components/dyte-chat.svg","sidebar_position":2,"description":"Learn how to use and customize the CustomChatViewController component in Dyte\'s iOS UiKit with our detailed documentation."},"sidebar":"tutorialSidebar","previous":{"title":"Pre-built Chat Screen","permalink":"/ios/chat/pre-built-chat-screen"},"next":{"title":"Attachments in Chat","permalink":"/ios/chat/attachments-in-chat"}}');var o=n(74848),i=n(28453);const a={image:"/static/ui-kit/1.x.x/components/dyte-chat.svg",sidebar_position:2,description:"Learn how to use and customize the CustomChatViewController component in Dyte's iOS UiKit with our detailed documentation."},r="Chat Components",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Topics:",id:"topics",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"chat-components",children:"Chat Components"})}),"\n",(0,o.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(t.p,{children:"A custom chat view controller used to show chat screen with image & file upload."}),"\n",(0,o.jsx)(t.h3,{id:"topics",children:"Topics:"}),"\n",(0,o.jsxs)(t.p,{children:["Listen to chat message updates using ",(0,o.jsx)(t.code,{children:"meeting.addChatEventsListener(chatEventsListener: self)"})," & get callbacks:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-swift",children:"extension ChatViewController: DyteChatEventsListener {\r\n    public func onNewChatMessage(message: DyteChatMessage) {\r\n       //This can be used to show local notifications\r\n    }\r\n\r\n    public  func onChatUpdates(messages: [DyteChatMessage]) {\r\n        loadChatMessages()\r\n    }\r\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"Creating a custom chat screen, you need following things:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-swift",children:"var messages: [DyteChatMessage]?\r\nlet messageTableView = UITableView()\r\nlet sendFileButton = DyteButton(style: .iconOnly(icon: DyteImage(image: sendFileImageIcon)), dyteButtonState: .focus)\r\nlet sendImageButton = DyteButton(style: .iconOnly(icon: DyteImage(image: sendImageIcon)), dyteButtonState: .active)\r\nlet sendMessageButton = DyteButton(style: .iconOnly(icon: DyteImage(image: sendMessageIcon)), dyteButtonState: .active)\r\nvar documentsViewController: DocumentsViewController?\r\nlet imagePicker = UIImagePickerController()\r\nlet messageTextView = UITextView()\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"CustomChatViewController"})," will have a tableView and at bottom buttons to select image/file and button to send message\r\nLoad messages & scroll to bottom to show latest message:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-swift",children:"private func loadChatMessages() {\r\n  self.messages = self.meeting.chat.messages\r\n  if messages.count > 0 {\r\n    messageTableView.reloadData(completion: {\r\n        DispatchQueue.main.async { [weak self] in\r\n            let indexPath = IndexPath(row: (self?.messages?.count ?? 1)-1, section: 0)\r\n            self?.messageTableView.scrollToRow(at: indexPath, at: .bottom, animated: true)\r\n        }\r\n    })\r\n  }\r\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:["Send text message, if it is correct and empty ",(0,o.jsx)(t.code,{children:"textView"})," once done:"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-swift",children:'@objc func sendButtonTapped() {\r\n  if !messageTextView.text.isEmpty {\r\n    let spacing = CharacterSet.whitespacesAndNewlines\r\n    let message = messageTextView.text.trimmingCharacters(in: spacing)\r\n    try?meeting.chat.sendTextMessage(message: message)\r\n    messageTextView.text = ""\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(t.p,{children:"Few helper functions:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-swift",children:"\r\npublic extension UITableView {\r\n\r\n    func reloadData(completion: @escaping () -> ()) {\r\n        UIView.animate(withDuration: 0, animations: {\r\n            self.reloadData()\r\n        }, completion: { _ in\r\n            completion()\r\n        })\r\n    }\r\n\r\n    func scrollToFirstCell() {\r\n        if numberOfSections > 0 {\r\n            if numberOfRows(inSection: 0) > 0 {\r\n                scrollToRow(at: IndexPath(row: 0, section: 0), at: .top, animated: true)\r\n            }\r\n        }\r\n    }\r\n\r\n    func scrollToLastCell(animated: Bool) {\r\n        if numberOfSections > 0 {\r\n            let nRows = numberOfRows(inSection: numberOfSections - 1)\r\n            if nRows > 0 {\r\n                scrollToRow(at: IndexPath(row: nRows - 1, section: numberOfSections - 1), at: .bottom, animated: animated)\r\n            }\r\n        }\r\n    }\r\n\r\n    func stopScrolling() {\r\n\r\n        guard isDragging else {\r\n            return\r\n        }\r\n\r\n        var offset = self.contentOffset\r\n        offset.y -= 1.0\r\n        setContentOffset(offset, animated: false)\r\n\r\n        offset.y += 1.0\r\n        setContentOffset(offset, animated: false)\r\n    }\r\n\r\n    func scrolledToBottom() -> Bool {\r\n        return contentOffset.y >= (contentSize.height - bounds.size.height)\r\n    }\r\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"DyteChatMessage"})," can be of type ",(0,o.jsx)(t.code,{children:"DyteTextMessage"}),", ",(0,o.jsx)(t.code,{children:"DyteFileMessage"})," or ",(0,o.jsx)(t.code,{children:"DyteImageMessage"}),"."]}),"\n",(0,o.jsx)(n,{children:(0,o.jsx)("title",{children:"iOS CustomChatViewController"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(96540);const o={},i=s.createContext(o);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);