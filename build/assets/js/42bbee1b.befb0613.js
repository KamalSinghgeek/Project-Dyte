"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[86734],{74204:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>l});const d=JSON.parse('{"id":"build-pre-call-ui/build-your-own/add-audio-video-device","title":"Audio/video - Device Selection","description":"To let the user choose between multiple available input / output devices, you can use the DyteSettingsFragment or DyteSettingsBottomsheet component","source":"@site/docs/android/build-pre-call-ui/build-your-own/add-audio-video-device.mdx","sourceDirName":"build-pre-call-ui/build-your-own","slug":"/build-pre-call-ui/build-your-own/add-audio-video-device","permalink":"/android/build-pre-call-ui/build-your-own/add-audio-video-device","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/android/build-pre-call-ui/build-your-own/add-audio-video-device.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":4,"frontMatter":{"title":"Audio/video - Device Selection","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Audio/video - Preview","permalink":"/android/build-pre-call-ui/build-your-own/add-audio-video-preview"},"next":{"title":"Using DyteGridView","permalink":"/android/render-participant-videos/using-dytegrid"}}');var o=n(74848),t=n(28453);const r={title:"Audio/video - Device Selection",sidebar_position:4},c=void 0,a={},l=[{value:"for video device Selection",id:"for-video-device-selection",level:2},{value:"for audio device Selection",id:"for-audio-device-selection",level:2}];function s(e){const i={code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(i.p,{children:["To let the user choose between multiple available input / output devices, you can use the ",(0,o.jsx)(i.code,{children:"DyteSettingsFragment"})," or ",(0,o.jsx)(i.code,{children:"DyteSettingsBottomsheet"})," component"]}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:'val dyteSettingsFragment = DyteSettingsFragment()\r\ndyteSettingsFragment.show(\r\n  fragmentManager,\r\n  "SOME_TAG_HERE"\r\n)\n'})}),"\n",(0,o.jsx)(i.h2,{id:"for-video-device-selection",children:"for video device Selection"}),"\n",(0,o.jsxs)(i.p,{children:["You can access list of video devices like ",(0,o.jsx)(i.code,{children:"meeting.localUser.getVideoDevices()"})," and selected video device can be accessed with ",(0,o.jsx)(i.code,{children:"meeting.localUser.getSelectedVideoDevice()"})]}),"\n",(0,o.jsx)(i.p,{children:"To render the video device selection you can use following code"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-xml",children:'<androidx.appcompat.widget.AppCompatSpinner\r\n  android:id="@+id/spVideoSource"\r\n  android:layout_width="0dp"\r\n  android:layout_height="48dp"\r\n  android:spinnerMode="dropdown"\r\n/>\n'})}),"\n",(0,o.jsx)(i.p,{children:"and on the kotlin side"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"val videoDevices = meeting.localUser.getVideoDevices()\r\nval videoAdapter = ArrayAdapter(\r\n        requireContext(),\r\n        R.layout.dyte_spinner_item,\r\n        videoDevices.map { it.type.displayName },\r\n      )\r\nvideoAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\nval selectedVideoDevice = meeting.localUser.getSelectedVideoDevice()\r\nval selectedPosition = videoDevices.indexOfFirst { it.type == selectedVideoDevice?.type }\r\nvideoDeviceSpinner.adapter = videoAdapter\r\nvideoDeviceSpinner.onItemSelectedListener =\r\n  object : OnItemSelectedListener {\r\n    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n      val device = videoDevices[position]\r\n      meeting.localUser.setVideoDevice(device)\r\n    }\r\n\r\n    override fun onNothingSelected(parent: AdapterView<*>?) {\r\n      // no-op\r\n    }\r\n  }\r\nvideoDeviceSpinner.setSelection(selectedPosition, false)\n"})}),"\n",(0,o.jsx)(i.h2,{id:"for-audio-device-selection",children:"for audio device Selection"}),"\n",(0,o.jsxs)(i.p,{children:["You can access list of audio devices like ",(0,o.jsx)(i.code,{children:"meeting.localUser.getAudioDevices()"})," and selected audio device can be accessed with ",(0,o.jsx)(i.code,{children:"meeting.localUser.getSelectedAudioDevice()"})]}),"\n",(0,o.jsx)(i.p,{children:"To render the audio device selection you can use following code"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-xml",children:'<androidx.appcompat.widget.AppCompatSpinner\r\n  android:id="@+id/spAudioSource"\r\n  android:layout_width="0dp"\r\n  android:layout_height="48dp"\r\n  android:spinnerMode="dropdown"\r\n/>\n'})}),"\n",(0,o.jsx)(i.p,{children:"and on the kotlin side"}),"\n",(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-kotlin",children:"val audioDevices = meeting.localUser.getAudioDevices()\r\nval audioAdapter = ArrayAdapter(\r\n        requireContext(),\r\n        R.layout.dyte_spinner_item,\r\n        audioDevices.map { it.type.displayName },\r\n      )\r\naudioAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)\r\nval selectedAudioDevice = meeting.localUser.getSelectedAudioDevice()\r\nval selectedPosition = audioDevices.indexOfFirst { it.type == selectedAudioDevice?.type }\r\naudioDeviceSpinner.adapter = audioAdapter\r\naudioDeviceSpinner.onItemSelectedListener =\r\n  object : OnItemSelectedListener {\r\n    override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {\r\n      val device = audioDevices[position]\r\n      meeting.localUser.setAudioDevice(device)\r\n    }\r\n\r\n    override fun onNothingSelected(parent: AdapterView<*>?) {\r\n      // no-op\r\n    }\r\n  }\r\naudioDeviceSpinner.setSelection(selectedPosition, false)\n"})})]})}function u(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(s,{...e})}):s(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>c});var d=n(96540);const o={},t=d.createContext(o);function r(e){const i=d.useContext(t);return d.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),d.createElement(t.Provider,{value:i},e.children)}}}]);