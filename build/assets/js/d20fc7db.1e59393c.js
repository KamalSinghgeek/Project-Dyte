"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[35363],{11584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"pre-call/waiting-room","title":"Waiting Room","description":"When you call meeting.joinRoom(), the user either enters the meeting room directly if allowed, or they are placed in the waiting room","source":"@site/docs/android-core/pre-call/4-waiting-room.mdx","sourceDirName":"pre-call","slug":"/pre-call/waiting-room","permalink":"/android-core/pre-call/waiting-room","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/android-core/pre-call/4-waiting-room.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Meeting Metadata","permalink":"/android-core/pre-call/meeting-meta"},"next":{"title":"Introduction","permalink":"/android-core/Introduction"}}');var r=n(74848),o=n(28453);const s={},a="Waiting Room",c={},l=[{value:"Meeting Room Joined",id:"meeting-room-joined",level:3},{value:"Waitlisted Participant",id:"waitlisted-participant",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"waiting-room",children:"Waiting Room"})}),"\n",(0,r.jsxs)(t.p,{children:["When you call ",(0,r.jsx)(t.code,{children:"meeting.joinRoom()"}),", the user either enters the meeting room directly if allowed, or they are placed in the waiting room\r\nif they are a waitlisted participant."]}),"\n",(0,r.jsx)(t.p,{children:"The diagram illustrates the possible room states the local user can be in."}),"\n",(0,r.jsx)(t.mermaid,{value:"stateDiagram-v2\r\n    init --\x3e joined\r\n    init --\x3e waitlisted\r\n    waitlisted --\x3e joined\r\n    waitlisted --\x3e rejected"}),"\n",(0,r.jsx)("br",{}),"\n",(0,r.jsx)(t.h3,{id:"meeting-room-joined",children:"Meeting Room Joined"}),"\n",(0,r.jsxs)(t.p,{children:["If user joins the room successfully, you receive the ",(0,r.jsx)(t.code,{children:"onMeetingRoomJoinCompleted"})," callback in ",(0,r.jsx)(t.code,{children:"DyteMeetingRoomEventsListener"}),".\r\nYou can listen for this callback as follows:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"meeting.addMeetingRoomEventsListener(object : DyteMeetingRoomEventsListener {\r\n    override fun onMeetingRoomJoinCompleted() {\r\n        // Local user is in the meeting\r\n    }\r\n})\n"})}),"\n",(0,r.jsx)(t.h3,{id:"waitlisted-participant",children:"Waitlisted Participant"}),"\n",(0,r.jsxs)(t.p,{children:["If the user is waitlisted, the ",(0,r.jsx)(t.code,{children:"onWaitListStatusUpdate"})," callback in ",(0,r.jsx)(t.code,{children:"DyteSelfEventsListener"})," notifies you of any changes in the\r\nuser's waitlist status. You can check the ",(0,r.jsx)(t.code,{children:"waitListStatus"})," to determine their status:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"WAITING"}),": Local user is in the waiting room."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"REJECTED"}),":  Local user's join room request is rejected by the host."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-kotlin",children:"meeting.addSelfEventsListener(object : DyteSelfEventsListener {\r\n    override fun onWaitListStatusUpdate(waitListStatus: WaitListStatus) {\r\n        when (waitListStatus) {\r\n            WAITING -> {\r\n                // Local user is in the waiting room\r\n            }\r\n            REJECTED -> {\r\n                // Local user's join room request was rejected by the host\r\n            }\r\n            else -> { }\r\n        }\r\n    }\r\n})\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Host can use ",(0,r.jsx)(t.a,{href:"/android-core/participants#waiting-room-methods",children:"these methods to accept/reject participants"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(96540);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);