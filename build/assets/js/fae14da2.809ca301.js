"use strict";(self.webpackChunkdyte_docs=self.webpackChunkdyte_docs||[]).push([[31379],{86224:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"participants/introduction","title":"Types","description":"The data regarding all meeting participants is stored under meeting.participants. These does not include the local user. Use the methods and events to consume the participants data. For example, to get all the participants who joined the meeting:","source":"@site/docs/android/participants/introduction.mdx","sourceDirName":"participants","slug":"/participants/introduction","permalink":"/android/participants/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/dyte-io/docs/tree/main/docs/android/participants/introduction.mdx","tags":[],"version":"current","lastUpdatedAt":1731210620000,"sidebarPosition":1,"frontMatter":{"title":"Types","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Prebuilt Chat Screen","permalink":"/android/chat/prebuilt-screen"},"next":{"title":"Prebuilt","permalink":"/android/participants/prebuilt"}}');var s=i(74848),a=i(28453);const r={title:"Types",sidebar_position:1},o=void 0,c={},l=[];function d(e){const t={code:"code",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["The data regarding all meeting participants is stored under ",(0,s.jsx)(t.code,{children:"meeting.participants"}),". These ",(0,s.jsx)(t.strong,{children:"does not"})," include the local user. Use the methods and events to consume the participants data. For example, to get all the participants who joined the meeting:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-kotlin",children:"// get all joined participants\r\nval joined: List<DyteJoinedMeetingParticipant> = meeting.participants.joined\r\n\r\n// get all participants\r\nval all: List<DyteParticipant> = meeting.participants.all\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"meeting.participants"})," object has the following ",(0,s.jsx)(t.strong,{children:"lists"})," of participants"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"all"}),": A list that contains all the participants who have joined the meeting except the local user"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"joined"}),": A list that contains all the participants who are currently in the meeting\r\nexcept the local user"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"waitlisted"}),": A list that contains all the participants waiting to join the\r\nmeeting."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"active"}),": A list that contains all the participants except the local user whose media is subscribed to i.e\r\nparticipants are supposed to be on the screen at the moment except the local user"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"pinned"}),": A list that contains all the pinned participants of the meeting."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"screenShares"}),": A list that contains all the participants who are sharing their screen."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Therefore if you were to make a video / audio grid of participants, you'd use the ",(0,s.jsx)(t.code,{children:"active"})," map, but to display the list of all participants in the meeting you'd use the ",(0,s.jsx)(t.code,{children:"joined"})," map."]}),"\n",(0,s.jsxs)(t.p,{children:["Each participant in each of the ",(0,s.jsx)(t.code,{children:"joined"}),", ",(0,s.jsx)(t.code,{children:"active"}),", ",(0,s.jsx)(t.code,{children:"pinned"})," and ",(0,s.jsx)(t.code,{children:"screenShares"})," list are of type ",(0,s.jsx)(t.code,{children:"DyteJoinedMeetingParticipant"}),", ",(0,s.jsx)(t.code,{children:"waitlisted"})," list is of type ",(0,s.jsx)(t.code,{children:"DyteWaitlistedParticipant"})," and ",(0,s.jsx)(t.code,{children:"all"})," list is of type ",(0,s.jsx)(t.code,{children:"DyteParticipant"}),"."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(96540);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);